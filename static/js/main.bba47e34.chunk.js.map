{"version":3,"sources":["components/InteractiveChart.tsx","components/WordsTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["InteractiveChart","data","setHighlight","useState","allActive","setAllActive","activeIndex","setActiveIndex","Row","className","width","height","barCategoryGap","dataKey","axisLine","tickLine","interval","allowDecimals","hide","onMouseOver","index","onMouseOut","map","entry","cursor","fill","key","WordsTable","hanCharacter","RegExp","getHsk","frequencyNumber","parseInt","levelToCEFR","level","App","input","setInput","words","setWords","results","setResults","undefined","difficulty","setDifficulty","frequencies","setFrequencies","name","chartData","setChartData","highlight","useEffect","hanzi","start","newWords","_","Array","from","e","newFrequencies","filter","word","test","getCharacterFrequency","orderedFrequencies","f","number","length","wordItems","frequency","popover","Popover","id","Title","as","character","pinyin","Content","meaning","Col","xs","md","lg","style","paddingLeft","paddingRight","OverlayTrigger","trigger","placement","overlay","Card","backgroundColor","Body","fontSize","Container","fluid","Math","floor","wordFrequencies","wordsAtLevel","i","push","getHskData","Jumbotron","xl","Form","Group","controlId","Control","size","type","value","onChange","event","target","placeholder","maxLength","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bba47e34.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { useState } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport {\n  BarChart,\n  CartesianGrid,\n  Tooltip,\n  XAxis,\n  YAxis,\n  Legend,\n  Bar,\n  Cell,\n  ResponsiveContainer,\n} from \"recharts\";\n\nexport type DataEntry = {\n  name: string;\n  words: number;\n};\n\ntype ChartProps = {\n  data: DataEntry[];\n  setHighlight: any;\n};\nconst InteractiveChart = ({ data, setHighlight }: ChartProps) => {\n  const [allActive, setAllActive] = useState<boolean>(true);\n  const [activeIndex, setActiveIndex] = useState<Number>(0);\n\n  const handleMouseOver = (data: any, index: any) => {\n    setHighlight(index + 1);\n    setActiveIndex(index);\n    setAllActive(false);\n  };\n\n  const handleMouseOut = (data: any, index: any) => {\n    setAllActive(true);\n    setHighlight(0);\n  };\n\n  return (\n    <Row className=\"justify-content-md-center\">\n      <ResponsiveContainer width=\"95%\" height={250}>\n        <BarChart data={data} barCategoryGap=\"2%\">\n          <XAxis\n            dataKey=\"name\"\n            // label=\"height\"\n            axisLine={false}\n            tickLine={false}\n            // ticks={[\"3\", \"2\", \"1\", 4, \"5\", \"\", \"7\"]}\n          />\n          <YAxis interval={1} allowDecimals={false} hide={true} />\n          {/* <Tooltip /> */}\n          <Bar\n            dataKey=\"words\"\n            onMouseOver={handleMouseOver}\n            onMouseOut={handleMouseOut}\n          >\n            {data.map((entry, index) => (\n              <Cell\n                cursor=\"pointer\"\n                fill={\n                  index === activeIndex || allActive ? \"#2980b9\" : \"#bdc3c7\"\n                }\n                key={`cell-${index}`}\n              ></Cell>\n            ))}\n          </Bar>\n        </BarChart>\n      </ResponsiveContainer>\n    </Row>\n  );\n};\n\nexport default InteractiveChart;\n","import * as React from \"react\";\nimport hanzi from \"hanzi\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\ntype Props = {};\n\nconst WordComponent = (word: string) => {\n  word = \"æˆ‘\";\n  return <Col></Col>;\n};\n\nconst WordsTable = () => {\n  return (\n    <>\n      <h2>Words Table</h2>\n    </>\n  );\n};\n\nexport default WordsTable;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Form from \"react-bootstrap/Form\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\nimport Popover from \"react-bootstrap/Popover\";\nimport PopoverContent from \"react-bootstrap/PopoverContent\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport hanzi from \"hanzi\";\nimport * as _ from \"lodash\";\nimport InteractiveChart, { DataEntry } from \"./components/InteractiveChart\";\nimport WordsTable from \"./components/WordsTable\";\n\nconst hanCharacter = new RegExp(\"[\\u4E00-\\u9FCC]\");\n//what percentile of easiest words should be the sentence difficulty\nconst DIFFICULTY_THRESHOLD = 0.9;\n\ntype Frequency = {\n  number: string;\n  character: string;\n  count: string;\n  percentage: number;\n  pinyin: string;\n  meaning: string;\n};\n\n// const getHsk = (frequencyNumber: number | string): number => {\n//   if (typeof frequencyNumber === \"string\")\n//     frequencyNumber = parseInt(frequencyNumber);\n//   if (frequencyNumber <= 178) return 1;\n//   if (frequencyNumber <= 485) return 2;\n//   if (frequencyNumber <= 623) return 3;\n//   if (frequencyNumber <= 1071) return 4;\n//   if (frequencyNumber <= 1709) return 5;\n//   if (frequencyNumber <= 2633) return 6;\n//   return 7;\n// };\n\nconst getHsk = (frequencyNumber: number | string): number => {\n  if (typeof frequencyNumber === \"string\")\n    frequencyNumber = parseInt(frequencyNumber);\n  if (frequencyNumber <= 300) return 1;\n  if (frequencyNumber <= 600) return 2;\n  if (frequencyNumber <= 1200) return 3;\n  if (frequencyNumber <= 2500) return 4;\n  if (frequencyNumber <= 5000) return 5;\n  return 6;\n};\n\nconst levelToCEFR = (level: number): string => {\n  switch (level) {\n    case 1:\n      return \"A1\";\n    case 2:\n      return \"A2\";\n    case 3:\n      return \"B1\";\n    case 4:\n      return \"B2\";\n    case 5:\n      return \"C1\";\n    case 6:\n      return \"C2\";\n    default:\n      return \"C2\";\n  }\n};\n\n//assumes it is sorted\nconst getHskData = (wordFrequencies: Frequency[]) => {\n  let results = [];\n  let wordsAtLevel: { [level: number]: number } = {};\n  for (let i = 1; i < 7; i++) {\n    wordsAtLevel[i] = 0;\n  }\n  wordFrequencies.map((f: Frequency) => {\n    wordsAtLevel[getHsk(f.number)] += 1;\n  });\n\n  //add to data\n  for (let i = 1; i < 7; i++) {\n    results.push({\n      name: levelToCEFR(i),\n      words: wordsAtLevel[i],\n    });\n  }\n  return results;\n};\n\nfunction App() {\n  const [input, setInput] = useState<string>(\"ç•ªèŒ„è¥¿çº¢æŸ¿åŒ—æ–¹\");\n  const [words, setWords] = useState<string[]>([]);\n  const [results, setResults] = useState(<h2></h2>);\n  const [difficulty, setDifficulty] = useState<string | undefined>(undefined);\n  const [frequencies, setFrequencies] = useState<Frequency[]>([]);\n  const [chartData, setChartData] = useState<DataEntry[]>([\n    {\n      name: \"Level 1\",\n      words: 10,\n    },\n  ]);\n  const [highlight, setHighlight] = useState<number>();\n\n  const handleChange = (event: any) => {\n    const value = event.target.value;\n    if (typeof value === \"string\") {\n      setInput(value);\n    }\n  };\n\n  useEffect(() => {\n    hanzi.start();\n  }, []);\n\n  useEffect(() => {\n    const newWords: string[] = _.uniqBy(Array.from(input), (e) => e);\n    // const newWords: string[] = hanzi.segment(input);\n    setWords(newWords);\n  }, [input]);\n\n  useEffect(() => {\n    const newFrequencies: Frequency[] = words\n      .filter((word) => {\n        if (!hanCharacter.test(word)) {\n          setFrequencies([]);\n          return false;\n        }\n        return true;\n      })\n      .map((word) => {\n        return hanzi.getCharacterFrequency(word);\n      });\n    const orderedFrequencies = _.sortBy(newFrequencies, (f: Frequency) =>\n      parseInt(f.number)\n    );\n\n    if (newFrequencies.length > 0) {\n      setFrequencies(orderedFrequencies);\n    }\n  }, [words]);\n\n  useEffect(() => {\n    //update frequency table\n    const wordItems = frequencies.map((frequency: Frequency) => {\n      const level = getHsk(frequency.number);\n      const popover = (\n        <Popover id=\"popover-basic\">\n          <Popover.Title as=\"h3\">\n            {frequency.character} {frequency.pinyin}\n          </Popover.Title>\n          <Popover.Content>\n            Frequency: {frequency.number} ({levelToCEFR(level)})\n          </Popover.Content>\n          <Popover.Content>Meaning: {frequency.meaning}</Popover.Content>\n        </Popover>\n      );\n\n      return (\n        <Col\n          xs={3}\n          md={3}\n          lg={2}\n          key={frequency.number}\n          style={{\n            paddingLeft: 0,\n            paddingRight: 0,\n          }}\n        >\n          <OverlayTrigger\n            trigger={[\"click\", \"hover\"]}\n            placement=\"auto-start\"\n            overlay={popover}\n          >\n            <Card\n              style={{\n                backgroundColor: highlight === level ? \"#3498db\" : \"\",\n              }}\n            >\n              <Card.Body>\n                <Card.Title style={{ fontSize: \"2.5rem\" }}>\n                  {frequency.character}\n                </Card.Title>\n                {/* <Card.Text>{frequency.meaning}</Card.Text> */}\n              </Card.Body>\n            </Card>\n          </OverlayTrigger>\n        </Col>\n      );\n    });\n    setResults(\n      <Container fluid>\n        <Row>{wordItems}</Row>\n      </Container>\n    );\n\n    //update difficulty\n    if (frequencies.length > 0) {\n      const id = Math.floor(frequencies.length * DIFFICULTY_THRESHOLD - 1);\n      if (frequencies[id]) setDifficulty(frequencies[id].number);\n    } else {\n      setDifficulty(undefined);\n    }\n\n    setChartData(getHskData(frequencies));\n  }, [frequencies, highlight]);\n\n  return (\n    <div className=\"App\">\n      <Jumbotron className=\"center\">\n        {/* <h1>How difficult?:</h1> */}\n        <Container fluid>\n          <Row className=\"justify-content-md-center\">\n            <Col md={12} xl={8}>\n              <Form>\n                <Form.Group controlId=\"sentence\">\n                  <Form.Control\n                    size=\"lg\"\n                    type=\"text\"\n                    value={input}\n                    onChange={handleChange}\n                    placeholder=\"Enter sentence\"\n                    maxLength={40}\n                    // style={{ maxWidth: \"20rem\", justifySelf: \"center\" }}\n                  />\n                </Form.Group>\n              </Form>\n              <h3>\n                Overall difficulty:{\" \"}\n                {difficulty\n                  ? \"CEFR \" + levelToCEFR(getHsk(parseInt(difficulty)))\n                  : \"n/a\"}{\" \"}\n              </h3>\n              <InteractiveChart data={chartData} setHighlight={setHighlight} />\n              <WordsTable />\n              {results}\n            </Col>\n          </Row>\n        </Container>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}