{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["hanCharacter","RegExp","getHsk","frequencyNumber","App","useState","input","setInput","characters","setCharacters","results","setResults","undefined","difficulty","setDifficulty","frequencies","setFrequencies","useEffect","hanzi","start","newFrequencies","filter","character","test","map","getCharacterFrequency","orderedFrequencies","_","f","parseInt","number","length","newChars","Array","from","e","charItems","frequency","ListGroup","Item","key","meaning","id","Math","floor","className","Jumbotron","Form","Group","controlId","Control","size","type","value","onChange","event","target","placeholder","maxLength","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sVASMA,EAAe,IAAIC,OAAO,mBAa1BC,EAAS,SAACC,GACd,OAAIA,GAAmB,IAAY,EAC/BA,GAAmB,IAAY,EAC/BA,GAAmB,IAAY,EAC/BA,GAAmB,KAAa,EAChCA,GAAmB,KAAa,EAChCA,GAAmB,KAAa,EAC7B,GAmGMC,MAhGf,WAAgB,IAAD,EACaC,mBAAiB,IAD9B,mBACNC,EADM,KACCC,EADD,OAEuBF,mBAAmB,IAF1C,mBAENG,EAFM,KAEMC,EAFN,OAGiBJ,mBAAS,8BAH1B,mBAGNK,EAHM,KAGGC,EAHH,OAIuBN,wBAA6BO,GAJpD,mBAINC,EAJM,KAIMC,EAJN,OAKyBT,mBAAsB,IAL/C,mBAKNU,EALM,KAKOC,EALP,KAqEb,OAvDAC,qBAAU,WACRC,IAAMC,UACL,IAEHF,qBAAU,WACR,IAAMG,EAA8BZ,EACjCa,QAAO,SAACC,GACP,QAAKtB,EAAauB,KAAKD,KACrBN,EAAe,KACR,MAIVQ,KAAI,SAACF,GACJ,OAAOJ,IAAMO,sBAAsBH,MAEjCI,EAAqBC,SAASP,GAAgB,SAACQ,GAAD,OAClDC,SAASD,EAAEE,WAGTV,EAAeW,OAAS,GAC1Bf,EAAeU,KAEhB,CAAClB,IAEJS,qBAAU,WACR,IAAMe,EAAqBL,SAASM,MAAMC,KAAK5B,IAAQ,SAAC6B,GAAD,OAAOA,KAC9D1B,EAAcuB,KAGb,CAAC1B,IAEJW,qBAAU,WACR,IAAMmB,EAAYrB,EAAYS,KAAI,SAACa,GACjC,OACE,kBAACC,EAAA,EAAUC,KAAX,CAAgBC,IAAKH,EAAUP,QAC7B,4BACGO,EAAUf,UADb,MAC2Be,EAAUP,OAAQ,IAC1C,QAAU5B,EAAO2B,SAASQ,EAAUP,SAAW,KAGlD,4BAAKO,EAAUI,aAMrB,GAFA9B,EAAW,kBAAC2B,EAAA,EAAD,KAAYF,IAEnBrB,EAAYgB,OAAS,EAAG,CAC1B,IAAMW,EAAKC,KAAKC,MAlFO,GAkFD7B,EAAYgB,OAAgC,GAC9DhB,EAAY2B,IAAK5B,EAAcC,EAAY2B,GAAIZ,aAEnDhB,OAAcF,KAEf,CAACG,IAGF,yBAAK8B,UAAU,OACb,kBAACC,EAAA,EAAD,CAAWD,UAAU,UAEnB,kBAACE,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,YACpB,kBAACF,EAAA,EAAKG,QAAN,CACEC,KAAK,KACLC,KAAK,OACLC,MAAO/C,EACPgD,SAxES,SAACC,GACpB,IAAMF,EAAQE,EAAMC,OAAOH,MACN,kBAAVA,GACT9C,EAAS8C,IAsEDI,YAAY,iBACZC,UAAW,OAKjB,0CACc,IACX7C,EAAa,OAASX,EAAO2B,SAAShB,IAAe,MAAO,KAE9DH,KC9GWiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ec69346b.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport Form from \"react-bootstrap/Form\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport hanzi from \"hanzi\";\nimport * as _ from \"lodash\";\n\nconst hanCharacter = new RegExp(\"[\\u4E00-\\u9FCC]\");\n\n//what percentile of easiest words should be the sentence difficulty\nconst DIFFICULTY_THRESHOLD = 0.9;\n\ntype Frequency = {\n  number: string;\n  character: string;\n  count: string;\n  percentage: number;\n  meaning: string;\n};\n\nconst getHsk = (frequencyNumber: number): number => {\n  if (frequencyNumber <= 178) return 1;\n  if (frequencyNumber <= 485) return 2;\n  if (frequencyNumber <= 623) return 3;\n  if (frequencyNumber <= 1071) return 4;\n  if (frequencyNumber <= 1709) return 5;\n  if (frequencyNumber <= 2633) return 6;\n  return 7;\n};\n\nfunction App() {\n  const [input, setInput] = useState<string>(\"\");\n  const [characters, setCharacters] = useState<string[]>([]);\n  const [results, setResults] = useState(<h2></h2>);\n  const [difficulty, setDifficulty] = useState<string | undefined>(undefined);\n  const [frequencies, setFrequencies] = useState<Frequency[]>([]);\n\n  const handleChange = (event: any) => {\n    const value = event.target.value;\n    if (typeof value === \"string\") {\n      setInput(value);\n    }\n  };\n\n  useEffect(() => {\n    hanzi.start();\n  }, []);\n\n  useEffect(() => {\n    const newFrequencies: Frequency[] = characters\n      .filter((character) => {\n        if (!hanCharacter.test(character)) {\n          setFrequencies([]);\n          return false;\n        }\n        return true;\n      })\n      .map((character) => {\n        return hanzi.getCharacterFrequency(character);\n      });\n    const orderedFrequencies = _.sortBy(newFrequencies, (f: Frequency) =>\n      parseInt(f.number)\n    );\n\n    if (newFrequencies.length > 0) {\n      setFrequencies(orderedFrequencies);\n    }\n  }, [characters]);\n\n  useEffect(() => {\n    const newChars: string[] = _.uniqBy(Array.from(input), (e) => e);\n    setCharacters(newChars);\n\n    // setResults(<ListGroup>{charItems}</ListGroup>);\n  }, [input]);\n\n  useEffect(() => {\n    const charItems = frequencies.map((frequency: Frequency) => {\n      return (\n        <ListGroup.Item key={frequency.number}>\n          <h3>\n            {frequency.character} - {frequency.number}{\" \"}\n            {\"(HSK \" + getHsk(parseInt(frequency.number)) + \")\"}\n            {/* {Math.floor(frequency.percentage)}% */}\n          </h3>\n          <h5>{frequency.meaning}</h5>\n        </ListGroup.Item>\n      );\n    });\n    setResults(<ListGroup>{charItems}</ListGroup>);\n\n    if (frequencies.length > 0) {\n      const id = Math.floor(frequencies.length * DIFFICULTY_THRESHOLD - 1);\n      if (frequencies[id]) setDifficulty(frequencies[id].number);\n    } else {\n      setDifficulty(undefined);\n    }\n  }, [frequencies]);\n\n  return (\n    <div className=\"App\">\n      <Jumbotron className=\"center\">\n        {/* <h1>How difficult?:</h1> */}\n        <Form>\n          <Form.Group controlId=\"sentence\">\n            <Form.Control\n              size=\"lg\"\n              type=\"text\"\n              value={input}\n              onChange={handleChange}\n              placeholder=\"Enter sentence\"\n              maxLength={20}\n              // style={{ maxWidth: \"20rem\", justifySelf: \"center\" }}\n            />\n          </Form.Group>\n        </Form>\n        <h2>\n          Difficulty:{\" \"}\n          {difficulty ? \"HSK \" + getHsk(parseInt(difficulty)) : \"n/a\"}{\" \"}\n        </h2>\n        {results}\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}